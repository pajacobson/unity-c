{
    "scope": "(source.c | source.c++ | source.c99) (meta.function & meta.block)",
    "completions": [
        {
            "annotation": "unity: fail message",
            "contents": "TEST_FAIL_MESSAGE(\"${1:message}\");",
            "trigger": "fam",
            "kind": "snippet"
        },
        {
            "annotation": "unity: fail",
            "contents": "TEST_FAIL();",
            "trigger": "fa",
            "kind": "snippet"
        },
        {
            "annotation": "unity: ignore message",
            "contents": "TEST_IGNORE_MESSAGE(\"${1:message}\");",
            "trigger": "igm",
            "kind": "snippet"
        },
        {
            "annotation": "unity: ignore",
            "contents": "TEST_IGNORE();",
            "trigger": "ig",
            "kind": "snippet"
        },
        {
            "annotation": "unity: message",
            "contents": "TEST_MESSAGE(\"${1:message}\");",
            "trigger": "me",
            "kind": "snippet"
        },
        {
            "annotation": "unity: only",
            "contents": "TEST_ONLY();",
            "trigger": "on",
            "kind": "snippet"
        },
        {
            "annotation": "unity: pass",
            "contents": "TEST_PASS();",
            "trigger": "pa",
            "kind": "snippet"
        },
        {
            "annotation": "unity: pass message",
            "contents": "TEST_PASS_MESSAGE(\"${1:message}\");",
            "trigger": "pam",
            "kind": "snippet"
        },
        {
            "annotation": "unity: file",
            "contents": "TEST_FILE(${1:a});",
            "trigger": "fi",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert",
            "contents": "TEST_ASSERT(${1:condition});",
            "trigger": "as",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert true",
            "contents": "TEST_ASSERT_TRUE(${1:condition});",
            "trigger": "at",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert unless",
            "contents": "TEST_ASSERT_UNLESS(${1:condition});",
            "trigger": "au",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert false",
            "contents": "TEST_ASSERT_FALSE(${1:condition});",
            "trigger": "af",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert null",
            "contents": "TEST_ASSERT_NULL(${1:pointer});",
            "trigger": "an",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert not null",
            "contents": "TEST_ASSERT_NOT_NULL(${1:pointer});",
            "trigger": "ann",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert empty",
            "contents": "TEST_ASSERT_EMPTY(${1:pointer});",
            "trigger": "ae",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert not empty",
            "contents": "TEST_ASSERT_NOT_EMPTY(${1:pointer});",
            "trigger": "ane",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert equal int",
            "contents": "TEST_ASSERT_EQUAL_INT(${1:expected}, ${2:actual});",
            "trigger": "aei",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert equal int8",
            "contents": "TEST_ASSERT_EQUAL_INT8(${1:expected}, ${2:actual});",
            "trigger": "aei8",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert equal int16",
            "contents": "TEST_ASSERT_EQUAL_INT16(${1:expected}, ${2:actual});",
            "trigger": "aei16",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert equal int32",
            "contents": "TEST_ASSERT_EQUAL_INT32(${1:expected}, ${2:actual});",
            "trigger": "aei32",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert equal int64",
            "contents": "TEST_ASSERT_EQUAL_INT64(${1:expected}, ${2:actual});",
            "trigger": "aei64",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert equal uint",
            "contents": "TEST_ASSERT_EQUAL_UINT(${1:expected}, ${2:actual});",
            "trigger": "aeu",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert equal uint8",
            "contents": "TEST_ASSERT_EQUAL_UINT8(${1:expected}, ${2:actual});",
            "trigger": "aeu8",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert equal uint16",
            "contents": "TEST_ASSERT_EQUAL_UINT16(${1:expected}, ${2:actual});",
            "trigger": "aeu16",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert equal uint32",
            "contents": "TEST_ASSERT_EQUAL_UINT32(${1:expected}, ${2:actual});",
            "trigger": "aeu32",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert equal uint64",
            "contents": "TEST_ASSERT_EQUAL_UINT64(${1:expected}, ${2:actual});",
            "trigger": "aeu64",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert equal size_t",
            "contents": "TEST_ASSERT_EQUAL_size_t(${1:expected}, ${2:actual});",
            "trigger": "aesz",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert equal hex",
            "contents": "TEST_ASSERT_EQUAL_HEX(${1:expected}, ${2:actual});",
            "trigger": "aeh",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert equal hex8",
            "contents": "TEST_ASSERT_EQUAL_HEX8(${1:expected}, ${2:actual});",
            "trigger": "aeh8",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert equal hex16",
            "contents": "TEST_ASSERT_EQUAL_HEX16(${1:expected}, ${2:actual});",
            "trigger": "aeh16",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert equal hex32",
            "contents": "TEST_ASSERT_EQUAL_HEX32(${1:expected}, ${2:actual});",
            "trigger": "aeh32",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert equal hex64",
            "contents": "TEST_ASSERT_EQUAL_HEX64(${1:expected}, ${2:actual});",
            "trigger": "aeh64",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert equal char",
            "contents": "TEST_ASSERT_EQUAL_CHAR(${1:expected}, ${2:actual});",
            "trigger": "aec",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert bits",
            "contents": "TEST_ASSERT_BITS(${1:mask}, ${2:expected}, ${3:actual});",
            "trigger": "ab",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert bits high",
            "contents": "TEST_ASSERT_BITS_HIGH(${1:mask}, ${2:actual});",
            "trigger": "abh",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert bits low",
            "contents": "TEST_ASSERT_BITS_LOW(${1:mask}, ${2:actual});",
            "trigger": "abl",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert bit high",
            "contents": "TEST_ASSERT_BIT_HIGH(${1:bit}, ${2:actual});",
            "trigger": "abh",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert bit low",
            "contents": "TEST_ASSERT_BIT_LOW(${1:bit}, ${2:actual});",
            "trigger": "abl",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert not equal int",
            "contents": "TEST_ASSERT_NOT_EQUAL_INT(${1:threshold}, ${2:actual});",
            "trigger": "anei",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert not equal int8",
            "contents": "TEST_ASSERT_NOT_EQUAL_INT8(${1:threshold}, ${2:actual});",
            "trigger": "anei8",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert not equal int16",
            "contents": "TEST_ASSERT_NOT_EQUAL_INT16(${1:threshold}, ${2:actual});",
            "trigger": "anei16",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert not equal int32",
            "contents": "TEST_ASSERT_NOT_EQUAL_INT32(${1:threshold}, ${2:actual});",
            "trigger": "anei32",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert not equal int64",
            "contents": "TEST_ASSERT_NOT_EQUAL_INT64(${1:threshold}, ${2:actual});",
            "trigger": "anei64",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert not equal uint",
            "contents": "TEST_ASSERT_NOT_EQUAL_UINT(${1:threshold}, ${2:actual});",
            "trigger": "aneu",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert not equal uint8",
            "contents": "TEST_ASSERT_NOT_EQUAL_UINT8(${1:threshold}, ${2:actual});",
            "trigger": "aneu8",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert not equal uint16",
            "contents": "TEST_ASSERT_NOT_EQUAL_UINT16(${1:threshold}, ${2:actual});",
            "trigger": "aneu16",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert not equal uint32",
            "contents": "TEST_ASSERT_NOT_EQUAL_UINT32(${1:threshold}, ${2:actual});",
            "trigger": "aneu32",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert not equal uint64",
            "contents": "TEST_ASSERT_NOT_EQUAL_UINT64(${1:threshold}, ${2:actual});",
            "trigger": "aneu64",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert not equal size_t",
            "contents": "TEST_ASSERT_NOT_EQUAL_size_t(${1:threshold}, ${2:actual});",
            "trigger": "anesz",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert not equal hex8",
            "contents": "TEST_ASSERT_NOT_EQUAL_HEX8(${1:threshold}, ${2:actual});",
            "trigger": "aneh8",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert not equal hex16",
            "contents": "TEST_ASSERT_NOT_EQUAL_HEX16(${1:threshold}, ${2:actual});",
            "trigger": "aneh16",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert not equal hex32",
            "contents": "TEST_ASSERT_NOT_EQUAL_HEX32(${1:threshold}, ${2:actual});",
            "trigger": "aneh32",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert not equal hex64",
            "contents": "TEST_ASSERT_NOT_EQUAL_HEX64(${1:threshold}, ${2:actual});",
            "trigger": "aneh64",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert not equal char",
            "contents": "TEST_ASSERT_NOT_EQUAL_CHAR(${1:threshold}, ${2:actual});",
            "trigger": "anec",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert greater than",
            "contents": "TEST_ASSERT_GREATER_THAN(${1:threshold}, ${2:actual});",
            "trigger": "agt",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert greater than int",
            "contents": "TEST_ASSERT_GREATER_THAN_INT(${1:threshold}, ${2:actual});",
            "trigger": "agti",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert greater than int8",
            "contents": "TEST_ASSERT_GREATER_THAN_INT8(${1:threshold}, ${2:actual});",
            "trigger": "agti8",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert greater than int16",
            "contents": "TEST_ASSERT_GREATER_THAN_INT16(${1:threshold}, ${2:actual});",
            "trigger": "agti16",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert greater than int32",
            "contents": "TEST_ASSERT_GREATER_THAN_INT32(${1:threshold}, ${2:actual});",
            "trigger": "agti32",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert greater than int64",
            "contents": "TEST_ASSERT_GREATER_THAN_INT64(${1:threshold}, ${2:actual});",
            "trigger": "agti64",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert greater than uint",
            "contents": "TEST_ASSERT_GREATER_THAN_UINT(${1:threshold}, ${2:actual});",
            "trigger": "agtu",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert greater than uint8",
            "contents": "TEST_ASSERT_GREATER_THAN_UINT8(${1:threshold}, ${2:actual});",
            "trigger": "agtu8",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert greater than uint16",
            "contents": "TEST_ASSERT_GREATER_THAN_UINT16(${1:threshold}, ${2:actual});",
            "trigger": "agtu16",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert greater than uint32",
            "contents": "TEST_ASSERT_GREATER_THAN_UINT32(${1:threshold}, ${2:actual});",
            "trigger": "agtu32",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert greater than uint64",
            "contents": "TEST_ASSERT_GREATER_THAN_UINT64(${1:threshold}, ${2:actual});",
            "trigger": "agtu64",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert greater than size_t",
            "contents": "TEST_ASSERT_GREATER_THAN_size_t(${1:threshold}, ${2:actual});",
            "trigger": "agtsz",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert greater than hex8",
            "contents": "TEST_ASSERT_GREATER_THAN_HEX8(${1:threshold}, ${2:actual});",
            "trigger": "agth8",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert greater than hex16",
            "contents": "TEST_ASSERT_GREATER_THAN_HEX16(${1:threshold}, ${2:actual});",
            "trigger": "agth16",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert greater than hex32",
            "contents": "TEST_ASSERT_GREATER_THAN_HEX32(${1:threshold}, ${2:actual});",
            "trigger": "agth32",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert greater than hex64",
            "contents": "TEST_ASSERT_GREATER_THAN_HEX64(${1:threshold}, ${2:actual});",
            "trigger": "agth64",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert greater than char",
            "contents": "TEST_ASSERT_GREATER_THAN_CHAR(${1:threshold}, ${2:actual});",
            "trigger": "agtc",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert less than",
            "contents": "TEST_ASSERT_LESS_THAN(${1:threshold}, ${2:actual});",
            "trigger": "alt",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert less than int",
            "contents": "TEST_ASSERT_LESS_THAN_INT(${1:threshold}, ${2:actual});",
            "trigger": "alti",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert less than int8",
            "contents": "TEST_ASSERT_LESS_THAN_INT8(${1:threshold}, ${2:actual});",
            "trigger": "alti8",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert less than int16",
            "contents": "TEST_ASSERT_LESS_THAN_INT16(${1:threshold}, ${2:actual});",
            "trigger": "alti16",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert less than int32",
            "contents": "TEST_ASSERT_LESS_THAN_INT32(${1:threshold}, ${2:actual});",
            "trigger": "alti32",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert less than int64",
            "contents": "TEST_ASSERT_LESS_THAN_INT64(${1:threshold}, ${2:actual});",
            "trigger": "alti64",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert less than uint",
            "contents": "TEST_ASSERT_LESS_THAN_UINT(${1:threshold}, ${2:actual});",
            "trigger": "altu",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert less than uint8",
            "contents": "TEST_ASSERT_LESS_THAN_UINT8(${1:threshold}, ${2:actual});",
            "trigger": "altu8",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert less than uint16",
            "contents": "TEST_ASSERT_LESS_THAN_UINT16(${1:threshold}, ${2:actual});",
            "trigger": "altu16",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert less than uint32",
            "contents": "TEST_ASSERT_LESS_THAN_UINT32(${1:threshold}, ${2:actual});",
            "trigger": "altu32",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert less than uint64",
            "contents": "TEST_ASSERT_LESS_THAN_UINT64(${1:threshold}, ${2:actual});",
            "trigger": "altu64",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert less than size_t",
            "contents": "TEST_ASSERT_LESS_THAN_size_t(${1:threshold}, ${2:actual});",
            "trigger": "altsz",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert less than hex8",
            "contents": "TEST_ASSERT_LESS_THAN_HEX8(${1:threshold}, ${2:actual});",
            "trigger": "alth8",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert less than hex16",
            "contents": "TEST_ASSERT_LESS_THAN_HEX16(${1:threshold}, ${2:actual});",
            "trigger": "alth16",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert less than hex32",
            "contents": "TEST_ASSERT_LESS_THAN_HEX32(${1:threshold}, ${2:actual});",
            "trigger": "alth32",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert less than hex64",
            "contents": "TEST_ASSERT_LESS_THAN_HEX64(${1:threshold}, ${2:actual});",
            "trigger": "alth64",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert less than char",
            "contents": "TEST_ASSERT_LESS_THAN_CHAR(${1:threshold}, ${2:actual});",
            "trigger": "altc",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert greater or equal",
            "contents": "TEST_ASSERT_GREATER_OR_EQUAL(${1:threshold}, ${2:actual});",
            "trigger": "agoe",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert greater or equal int",
            "contents": "TEST_ASSERT_GREATER_OR_EQUAL_INT(${1:threshold}, ${2:actual});",
            "trigger": "agoei",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert greater or equal int8",
            "contents": "TEST_ASSERT_GREATER_OR_EQUAL_INT8(${1:threshold}, ${2:actual});",
            "trigger": "agoei8",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert greater or equal int16",
            "contents": "TEST_ASSERT_GREATER_OR_EQUAL_INT16(${1:threshold}, ${2:actual});",
            "trigger": "agoei16",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert greater or equal int32",
            "contents": "TEST_ASSERT_GREATER_OR_EQUAL_INT32(${1:threshold}, ${2:actual});",
            "trigger": "agoei32",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert greater or equal int64",
            "contents": "TEST_ASSERT_GREATER_OR_EQUAL_INT64(${1:threshold}, ${2:actual});",
            "trigger": "agoei64",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert greater or equal uint",
            "contents": "TEST_ASSERT_GREATER_OR_EQUAL_UINT(${1:threshold}, ${2:actual});",
            "trigger": "agoeu",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert greater or equal uint8",
            "contents": "TEST_ASSERT_GREATER_OR_EQUAL_UINT8(${1:threshold}, ${2:actual});",
            "trigger": "agoeu8",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert greater or equal uint16",
            "contents": "TEST_ASSERT_GREATER_OR_EQUAL_UINT16(${1:threshold}, ${2:actual});",
            "trigger": "agoeu16",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert greater or equal uint32",
            "contents": "TEST_ASSERT_GREATER_OR_EQUAL_UINT32(${1:threshold}, ${2:actual});",
            "trigger": "agoeu32",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert greater or equal uint64",
            "contents": "TEST_ASSERT_GREATER_OR_EQUAL_UINT64(${1:threshold}, ${2:actual});",
            "trigger": "agoeu64",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert greater or equal size_t",
            "contents": "TEST_ASSERT_GREATER_OR_EQUAL_size_t(${1:threshold}, ${2:actual});",
            "trigger": "agoesz",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert greater or equal hex8",
            "contents": "TEST_ASSERT_GREATER_OR_EQUAL_HEX8(${1:threshold}, ${2:actual});",
            "trigger": "agoeh8",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert greater or equal hex16",
            "contents": "TEST_ASSERT_GREATER_OR_EQUAL_HEX16(${1:threshold}, ${2:actual});",
            "trigger": "agoeh16",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert greater or equal hex32",
            "contents": "TEST_ASSERT_GREATER_OR_EQUAL_HEX32(${1:threshold}, ${2:actual});",
            "trigger": "agoeh32",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert greater or equal hex64",
            "contents": "TEST_ASSERT_GREATER_OR_EQUAL_HEX64(${1:threshold}, ${2:actual});",
            "trigger": "agoeh64",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert greater or equal char",
            "contents": "TEST_ASSERT_GREATER_OR_EQUAL_CHAR(${1:threshold}, ${2:actual});",
            "trigger": "agoec",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert less or equal",
            "contents": "TEST_ASSERT_LESS_OR_EQUAL(${1:threshold}, ${2:actual});",
            "trigger": "aloe",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert less or equal int",
            "contents": "TEST_ASSERT_LESS_OR_EQUAL_INT(${1:threshold}, ${2:actual});",
            "trigger": "aloei",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert less or equal int8",
            "contents": "TEST_ASSERT_LESS_OR_EQUAL_INT8(${1:threshold}, ${2:actual});",
            "trigger": "aloei8",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert less or equal int16",
            "contents": "TEST_ASSERT_LESS_OR_EQUAL_INT16(${1:threshold}, ${2:actual});",
            "trigger": "aloei16",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert less or equal int32",
            "contents": "TEST_ASSERT_LESS_OR_EQUAL_INT32(${1:threshold}, ${2:actual});",
            "trigger": "aloei32",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert less or equal int64",
            "contents": "TEST_ASSERT_LESS_OR_EQUAL_INT64(${1:threshold}, ${2:actual});",
            "trigger": "aloei64",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert less or equal uint",
            "contents": "TEST_ASSERT_LESS_OR_EQUAL_UINT(${1:threshold}, ${2:actual});",
            "trigger": "aloeu",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert less or equal uint8",
            "contents": "TEST_ASSERT_LESS_OR_EQUAL_UINT8(${1:threshold}, ${2:actual});",
            "trigger": "aloeu8",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert less or equal uint16",
            "contents": "TEST_ASSERT_LESS_OR_EQUAL_UINT16(${1:threshold}, ${2:actual});",
            "trigger": "aloeu16",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert less or equal uint32",
            "contents": "TEST_ASSERT_LESS_OR_EQUAL_UINT32(${1:threshold}, ${2:actual});",
            "trigger": "aloeu32",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert less or equal uint64",
            "contents": "TEST_ASSERT_LESS_OR_EQUAL_UINT64(${1:threshold}, ${2:actual});",
            "trigger": "aloeu64",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert less or equal size_t",
            "contents": "TEST_ASSERT_LESS_OR_EQUAL_size_t(${1:threshold}, ${2:actual});",
            "trigger": "aloesz",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert less or equal hex8",
            "contents": "TEST_ASSERT_LESS_OR_EQUAL_HEX8(${1:threshold}, ${2:actual});",
            "trigger": "aloeh8",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert less or equal hex16",
            "contents": "TEST_ASSERT_LESS_OR_EQUAL_HEX16(${1:threshold}, ${2:actual});",
            "trigger": "aloeh16",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert less or equal hex32",
            "contents": "TEST_ASSERT_LESS_OR_EQUAL_HEX32(${1:threshold}, ${2:actual});",
            "trigger": "aloeh32",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert less or equal hex64",
            "contents": "TEST_ASSERT_LESS_OR_EQUAL_HEX64(${1:threshold}, ${2:actual});",
            "trigger": "aloeh64",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert less or equal char",
            "contents": "TEST_ASSERT_LESS_OR_EQUAL_CHAR(${1:threshold}, ${2:actual});",
            "trigger": "aloec",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert int within",
            "contents": "TEST_ASSERT_INT_WITHIN(${1:delta}, ${2:expected}, ${3:actual});",
            "trigger": "aiw",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert int8 within",
            "contents": "TEST_ASSERT_INT8_WITHIN(${1:delta}, ${2:expected}, ${3:actual});",
            "trigger": "ai8w",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert int16 within",
            "contents": "TEST_ASSERT_INT16_WITHIN(${1:delta}, ${2:expected}, ${3:actual});",
            "trigger": "ai16w",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert int32 within",
            "contents": "TEST_ASSERT_INT32_WITHIN(${1:delta}, ${2:expected}, ${3:actual});",
            "trigger": "ai32w",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert int64 within",
            "contents": "TEST_ASSERT_INT64_WITHIN(${1:delta}, ${2:expected}, ${3:actual});",
            "trigger": "ai64w",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert uint within",
            "contents": "TEST_ASSERT_UINT_WITHIN(${1:delta}, ${2:expected}, ${3:actual});",
            "trigger": "auw",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert uint8 within",
            "contents": "TEST_ASSERT_UINT8_WITHIN(${1:delta}, ${2:expected}, ${3:actual});",
            "trigger": "au8w",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert uint16 within",
            "contents": "TEST_ASSERT_UINT16_WITHIN(${1:delta}, ${2:expected}, ${3:actual});",
            "trigger": "au16w",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert uint32 within",
            "contents": "TEST_ASSERT_UINT32_WITHIN(${1:delta}, ${2:expected}, ${3:actual});",
            "trigger": "au32w",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert uint64 within",
            "contents": "TEST_ASSERT_UINT64_WITHIN(${1:delta}, ${2:expected}, ${3:actual});",
            "trigger": "au64w",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert size_t within",
            "contents": "TEST_ASSERT_size_t_WITHIN(${1:delta}, ${2:expected}, ${3:actual});",
            "trigger": "aszw",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert hex within",
            "contents": "TEST_ASSERT_HEX_WITHIN(${1:delta}, ${2:expected}, ${3:actual});",
            "trigger": "ahw",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert hex8 within",
            "contents": "TEST_ASSERT_HEX8_WITHIN(${1:delta}, ${2:expected}, ${3:actual});",
            "trigger": "ah8w",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert hex16 within",
            "contents": "TEST_ASSERT_HEX16_WITHIN(${1:delta}, ${2:expected}, ${3:actual});",
            "trigger": "ah16w",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert hex32 within",
            "contents": "TEST_ASSERT_HEX32_WITHIN(${1:delta}, ${2:expected}, ${3:actual});",
            "trigger": "ah32w",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert hex64 within",
            "contents": "TEST_ASSERT_HEX64_WITHIN(${1:delta}, ${2:expected}, ${3:actual});",
            "trigger": "ah64w",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert char within",
            "contents": "TEST_ASSERT_CHAR_WITHIN(${1:delta}, ${2:expected}, ${3:actual});",
            "trigger": "acw",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert int array within",
            "contents": "TEST_ASSERT_INT_ARRAY_WITHIN(${1:delta}, ${2:expected}, ${3:actual}, ${4:num_elements});",
            "trigger": "aiaw",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert int8 array within",
            "contents": "TEST_ASSERT_INT8_ARRAY_WITHIN(${1:delta}, ${2:expected}, ${3:actual}, ${4:num_elements});",
            "trigger": "ai8aw",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert int16 array within",
            "contents": "TEST_ASSERT_INT16_ARRAY_WITHIN(${1:delta}, ${2:expected}, ${3:actual}, ${4:num_elements});",
            "trigger": "ai16aw",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert int32 array within",
            "contents": "TEST_ASSERT_INT32_ARRAY_WITHIN(${1:delta}, ${2:expected}, ${3:actual}, ${4:num_elements});",
            "trigger": "ai32aw",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert int64 array within",
            "contents": "TEST_ASSERT_INT64_ARRAY_WITHIN(${1:delta}, ${2:expected}, ${3:actual}, ${4:num_elements});",
            "trigger": "ai64aw",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert uint array within",
            "contents": "TEST_ASSERT_UINT_ARRAY_WITHIN(${1:delta}, ${2:expected}, ${3:actual}, ${4:num_elements});",
            "trigger": "auaw",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert uint8 array within",
            "contents": "TEST_ASSERT_UINT8_ARRAY_WITHIN(${1:delta}, ${2:expected}, ${3:actual}, ${4:num_elements});",
            "trigger": "au8aw",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert uint16 array within",
            "contents": "TEST_ASSERT_UINT16_ARRAY_WITHIN(${1:delta}, ${2:expected}, ${3:actual}, ${4:num_elements});",
            "trigger": "au16aw",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert uint32 array within",
            "contents": "TEST_ASSERT_UINT32_ARRAY_WITHIN(${1:delta}, ${2:expected}, ${3:actual}, ${4:num_elements});",
            "trigger": "au32aw",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert uint64 array within",
            "contents": "TEST_ASSERT_UINT64_ARRAY_WITHIN(${1:delta}, ${2:expected}, ${3:actual}, ${4:num_elements});",
            "trigger": "au64aw",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert size_t array within",
            "contents": "TEST_ASSERT_size_t_ARRAY_WITHIN(${1:delta}, ${2:expected}, ${3:actual}, ${4:num_elements});",
            "trigger": "aszaw",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert hex array within",
            "contents": "TEST_ASSERT_HEX_ARRAY_WITHIN(${1:delta}, ${2:expected}, ${3:actual}, ${4:num_elements});",
            "trigger": "ahaw",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert hex8 array within",
            "contents": "TEST_ASSERT_HEX8_ARRAY_WITHIN(${1:delta}, ${2:expected}, ${3:actual}, ${4:num_elements});",
            "trigger": "ah8aw",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert hex16 array within",
            "contents": "TEST_ASSERT_HEX16_ARRAY_WITHIN(${1:delta}, ${2:expected}, ${3:actual}, ${4:num_elements});",
            "trigger": "ah16aw",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert hex32 array within",
            "contents": "TEST_ASSERT_HEX32_ARRAY_WITHIN(${1:delta}, ${2:expected}, ${3:actual}, ${4:num_elements});",
            "trigger": "ah32aw",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert hex64 array within",
            "contents": "TEST_ASSERT_HEX64_ARRAY_WITHIN(${1:delta}, ${2:expected}, ${3:actual}, ${4:num_elements});",
            "trigger": "ah64aw",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert char array within",
            "contents": "TEST_ASSERT_CHAR_ARRAY_WITHIN(${1:delta}, ${2:expected}, ${3:actual}, ${4:num_elements});",
            "trigger": "acaw",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert equal ptr",
            "contents": "TEST_ASSERT_EQUAL_PTR(${1:expected}, ${2:actual});",
            "trigger": "aep",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert equal string",
            "contents": "TEST_ASSERT_EQUAL_STRING(${1:expected}, ${2:actual});",
            "trigger": "aes",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert equal string len",
            "contents": "TEST_ASSERT_EQUAL_STRING_LEN(${1:expected}, ${2:actual}, ${3:len});",
            "trigger": "aesl",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert equal memory",
            "contents": "TEST_ASSERT_EQUAL_MEMORY(${1:expected}, ${2:actual}, ${3:len});",
            "trigger": "aem",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert equal int array",
            "contents": "TEST_ASSERT_EQUAL_INT_ARRAY(${1:expected}, ${2:actual}, ${3:num_elements});",
            "trigger": "aeia",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert equal int8 array",
            "contents": "TEST_ASSERT_EQUAL_INT8_ARRAY(${1:expected}, ${2:actual}, ${3:num_elements});",
            "trigger": "aei8a",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert equal int16 array",
            "contents": "TEST_ASSERT_EQUAL_INT16_ARRAY(${1:expected}, ${2:actual}, ${3:num_elements});",
            "trigger": "aei16a",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert equal int32 array",
            "contents": "TEST_ASSERT_EQUAL_INT32_ARRAY(${1:expected}, ${2:actual}, ${3:num_elements});",
            "trigger": "aei32a",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert equal int64 array",
            "contents": "TEST_ASSERT_EQUAL_INT64_ARRAY(${1:expected}, ${2:actual}, ${3:num_elements});",
            "trigger": "aei64a",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert equal uint array",
            "contents": "TEST_ASSERT_EQUAL_UINT_ARRAY(${1:expected}, ${2:actual}, ${3:num_elements});",
            "trigger": "aeua",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert equal uint8 array",
            "contents": "TEST_ASSERT_EQUAL_UINT8_ARRAY(${1:expected}, ${2:actual}, ${3:num_elements});",
            "trigger": "aeu8a",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert equal uint16 array",
            "contents": "TEST_ASSERT_EQUAL_UINT16_ARRAY(${1:expected}, ${2:actual}, ${3:num_elements});",
            "trigger": "aeu16a",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert equal uint32 array",
            "contents": "TEST_ASSERT_EQUAL_UINT32_ARRAY(${1:expected}, ${2:actual}, ${3:num_elements});",
            "trigger": "aeu32a",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert equal uint64 array",
            "contents": "TEST_ASSERT_EQUAL_UINT64_ARRAY(${1:expected}, ${2:actual}, ${3:num_elements});",
            "trigger": "aeu64a",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert equal size_t array",
            "contents": "TEST_ASSERT_EQUAL_size_t_ARRAY(${1:expected}, ${2:actual}, ${3:num_elements});",
            "trigger": "aesza",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert equal hex array",
            "contents": "TEST_ASSERT_EQUAL_HEX_ARRAY(${1:expected}, ${2:actual}, ${3:num_elements});",
            "trigger": "aeha",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert equal hex8 array",
            "contents": "TEST_ASSERT_EQUAL_HEX8_ARRAY(${1:expected}, ${2:actual}, ${3:num_elements});",
            "trigger": "aeh8a",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert equal hex16 array",
            "contents": "TEST_ASSERT_EQUAL_HEX16_ARRAY(${1:expected}, ${2:actual}, ${3:num_elements});",
            "trigger": "aeh16a",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert equal hex32 array",
            "contents": "TEST_ASSERT_EQUAL_HEX32_ARRAY(${1:expected}, ${2:actual}, ${3:num_elements});",
            "trigger": "aeh32a",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert equal hex64 array",
            "contents": "TEST_ASSERT_EQUAL_HEX64_ARRAY(${1:expected}, ${2:actual}, ${3:num_elements});",
            "trigger": "aeh64a",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert equal ptr array",
            "contents": "TEST_ASSERT_EQUAL_PTR_ARRAY(${1:expected}, ${2:actual}, ${3:num_elements});",
            "trigger": "aepa",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert equal string array",
            "contents": "TEST_ASSERT_EQUAL_STRING_ARRAY(${1:expected}, ${2:actual}, ${3:num_elements});",
            "trigger": "aesa",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert equal memory array",
            "contents": "TEST_ASSERT_EQUAL_MEMORY_ARRAY(${1:expected}, ${2:actual}, ${3:len}, ${4:num_elements});",
            "trigger": "aema",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert equal char array",
            "contents": "TEST_ASSERT_EQUAL_CHAR_ARRAY(${1:expected}, ${2:actual}, ${3:num_elements});",
            "trigger": "aeca",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert each equal int",
            "contents": "TEST_ASSERT_EACH_EQUAL_INT(${1:expected}, ${2:actual}, ${3:num_elements});",
            "trigger": "aeei",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert each equal int8",
            "contents": "TEST_ASSERT_EACH_EQUAL_INT8(${1:expected}, ${2:actual}, ${3:num_elements});",
            "trigger": "aeei8",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert each equal int16",
            "contents": "TEST_ASSERT_EACH_EQUAL_INT16(${1:expected}, ${2:actual}, ${3:num_elements});",
            "trigger": "aeei16",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert each equal int32",
            "contents": "TEST_ASSERT_EACH_EQUAL_INT32(${1:expected}, ${2:actual}, ${3:num_elements});",
            "trigger": "aeei32",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert each equal int64",
            "contents": "TEST_ASSERT_EACH_EQUAL_INT64(${1:expected}, ${2:actual}, ${3:num_elements});",
            "trigger": "aeei64",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert each equal uint",
            "contents": "TEST_ASSERT_EACH_EQUAL_UINT(${1:expected}, ${2:actual}, ${3:num_elements});",
            "trigger": "aeeu",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert each equal uint8",
            "contents": "TEST_ASSERT_EACH_EQUAL_UINT8(${1:expected}, ${2:actual}, ${3:num_elements});",
            "trigger": "aeeu8",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert each equal uint16",
            "contents": "TEST_ASSERT_EACH_EQUAL_UINT16(${1:expected}, ${2:actual}, ${3:num_elements});",
            "trigger": "aeeu16",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert each equal uint32",
            "contents": "TEST_ASSERT_EACH_EQUAL_UINT32(${1:expected}, ${2:actual}, ${3:num_elements});",
            "trigger": "aeeu32",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert each equal uint64",
            "contents": "TEST_ASSERT_EACH_EQUAL_UINT64(${1:expected}, ${2:actual}, ${3:num_elements});",
            "trigger": "aeeu64",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert each equal size_t",
            "contents": "TEST_ASSERT_EACH_EQUAL_size_t(${1:expected}, ${2:actual}, ${3:num_elements});",
            "trigger": "aeesz",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert each equal hex",
            "contents": "TEST_ASSERT_EACH_EQUAL_HEX(${1:expected}, ${2:actual}, ${3:num_elements});",
            "trigger": "aeeh",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert each equal hex8",
            "contents": "TEST_ASSERT_EACH_EQUAL_HEX8(${1:expected}, ${2:actual}, ${3:num_elements});",
            "trigger": "aeeh8",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert each equal hex16",
            "contents": "TEST_ASSERT_EACH_EQUAL_HEX16(${1:expected}, ${2:actual}, ${3:num_elements});",
            "trigger": "aeeh16",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert each equal hex32",
            "contents": "TEST_ASSERT_EACH_EQUAL_HEX32(${1:expected}, ${2:actual}, ${3:num_elements});",
            "trigger": "aeeh32",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert each equal hex64",
            "contents": "TEST_ASSERT_EACH_EQUAL_HEX64(${1:expected}, ${2:actual}, ${3:num_elements});",
            "trigger": "aeeh64",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert each equal ptr",
            "contents": "TEST_ASSERT_EACH_EQUAL_PTR(${1:expected}, ${2:actual}, ${3:num_elements});",
            "trigger": "aeep",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert each equal string",
            "contents": "TEST_ASSERT_EACH_EQUAL_STRING(${1:expected}, ${2:actual}, ${3:num_elements});",
            "trigger": "aees",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert each equal memory",
            "contents": "TEST_ASSERT_EACH_EQUAL_MEMORY(${1:expected}, ${2:actual}, ${3:len}, ${4:num_elements});",
            "trigger": "aeem",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert each equal char",
            "contents": "TEST_ASSERT_EACH_EQUAL_CHAR(${1:expected}, ${2:actual}, ${3:num_elements});",
            "trigger": "aeec",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert float within",
            "contents": "TEST_ASSERT_FLOAT_WITHIN(${1:delta}, ${2:expected}, ${3:actual});",
            "trigger": "afw",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert float not within",
            "contents": "TEST_ASSERT_FLOAT_NOT_WITHIN(${1:delta}, ${2:expected}, ${3:actual});",
            "trigger": "afnw",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert equal float",
            "contents": "TEST_ASSERT_EQUAL_FLOAT(${1:expected}, ${2:actual});",
            "trigger": "aef",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert not equal float",
            "contents": "TEST_ASSERT_NOT_EQUAL_FLOAT(${1:expected}, ${2:actual});",
            "trigger": "anef",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert equal float array",
            "contents": "TEST_ASSERT_EQUAL_FLOAT_ARRAY(${1:expected}, ${2:actual}, ${3:num_elements});",
            "trigger": "aefa",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert each equal float",
            "contents": "TEST_ASSERT_EACH_EQUAL_FLOAT(${1:expected}, ${2:actual}, ${3:num_elements});",
            "trigger": "aeef",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert greater than float",
            "contents": "TEST_ASSERT_GREATER_THAN_FLOAT(${1:threshold}, ${2:actual});",
            "trigger": "agtf",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert greater or equal float",
            "contents": "TEST_ASSERT_GREATER_OR_EQUAL_FLOAT(${1:threshold}, ${2:actual});",
            "trigger": "agoef",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert less than float",
            "contents": "TEST_ASSERT_LESS_THAN_FLOAT(${1:threshold}, ${2:actual});",
            "trigger": "altf",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert less or equal float",
            "contents": "TEST_ASSERT_LESS_OR_EQUAL_FLOAT(${1:threshold}, ${2:actual});",
            "trigger": "aloef",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert float is inf",
            "contents": "TEST_ASSERT_FLOAT_IS_INF(${1:actual});",
            "trigger": "afii",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert float is neg inf",
            "contents": "TEST_ASSERT_FLOAT_IS_NEG_INF(${1:actual});",
            "trigger": "afini",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert float is nan",
            "contents": "TEST_ASSERT_FLOAT_IS_NAN(${1:actual});",
            "trigger": "afin",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert float is determinate",
            "contents": "TEST_ASSERT_FLOAT_IS_DETERMINATE(${1:actual});",
            "trigger": "afid",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert float is not inf",
            "contents": "TEST_ASSERT_FLOAT_IS_NOT_INF(${1:actual});",
            "trigger": "afini",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert float is not neg inf",
            "contents": "TEST_ASSERT_FLOAT_IS_NOT_NEG_INF(${1:actual});",
            "trigger": "afinni",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert float is not nan",
            "contents": "TEST_ASSERT_FLOAT_IS_NOT_NAN(${1:actual});",
            "trigger": "afinn",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert float is not determinate",
            "contents": "TEST_ASSERT_FLOAT_IS_NOT_DETERMINATE(${1:actual});",
            "trigger": "afind",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert double within",
            "contents": "TEST_ASSERT_DOUBLE_WITHIN(${1:delta}, ${2:expected}, ${3:actual});",
            "trigger": "adw",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert double not within",
            "contents": "TEST_ASSERT_DOUBLE_NOT_WITHIN(${1:delta}, ${2:expected}, ${3:actual});",
            "trigger": "adnw",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert equal double",
            "contents": "TEST_ASSERT_EQUAL_DOUBLE(${1:expected}, ${2:actual});",
            "trigger": "aed",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert not equal double",
            "contents": "TEST_ASSERT_NOT_EQUAL_DOUBLE(${1:expected}, ${2:actual});",
            "trigger": "aned",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert equal double array",
            "contents": "TEST_ASSERT_EQUAL_DOUBLE_ARRAY(${1:expected}, ${2:actual}, ${3:num_elements});",
            "trigger": "aeda",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert each equal double",
            "contents": "TEST_ASSERT_EACH_EQUAL_DOUBLE(${1:expected}, ${2:actual}, ${3:num_elements});",
            "trigger": "aeed",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert greater than double",
            "contents": "TEST_ASSERT_GREATER_THAN_DOUBLE(${1:threshold}, ${2:actual});",
            "trigger": "agtd",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert greater or equal double",
            "contents": "TEST_ASSERT_GREATER_OR_EQUAL_DOUBLE(${1:threshold}, ${2:actual});",
            "trigger": "agoed",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert less than double",
            "contents": "TEST_ASSERT_LESS_THAN_DOUBLE(${1:threshold}, ${2:actual});",
            "trigger": "altd",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert less or equal double",
            "contents": "TEST_ASSERT_LESS_OR_EQUAL_DOUBLE(${1:threshold}, ${2:actual});",
            "trigger": "aloed",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert double is inf",
            "contents": "TEST_ASSERT_DOUBLE_IS_INF(${1:actual});",
            "trigger": "adii",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert double is neg inf",
            "contents": "TEST_ASSERT_DOUBLE_IS_NEG_INF(${1:actual});",
            "trigger": "adini",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert double is nan",
            "contents": "TEST_ASSERT_DOUBLE_IS_NAN(${1:actual});",
            "trigger": "adin",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert double is determinate",
            "contents": "TEST_ASSERT_DOUBLE_IS_DETERMINATE(${1:actual});",
            "trigger": "adid",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert double is not inf",
            "contents": "TEST_ASSERT_DOUBLE_IS_NOT_INF(${1:actual});",
            "trigger": "adini",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert double is not neg inf",
            "contents": "TEST_ASSERT_DOUBLE_IS_NOT_NEG_INF(${1:actual});",
            "trigger": "adinni",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert double is not nan",
            "contents": "TEST_ASSERT_DOUBLE_IS_NOT_NAN(${1:actual});",
            "trigger": "adinn",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert double is not determinate",
            "contents": "TEST_ASSERT_DOUBLE_IS_NOT_DETERMINATE(${1:actual});",
            "trigger": "adind",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert equal",
            "contents": "TEST_ASSERT_EQUAL(${1:expected}, ${2:actual});",
            "trigger": "ae",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert not equal",
            "contents": "TEST_ASSERT_NOT_EQUAL(${1:expected}, ${2:actual});",
            "trigger": "ane",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert message",
            "contents": "TEST_ASSERT_MESSAGE(${1:condition}, \"${2:message}\");",
            "trigger": "asm",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert true message",
            "contents": "TEST_ASSERT_TRUE_MESSAGE(${1:condition}, \"${2:message}\");",
            "trigger": "atm",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert unless message",
            "contents": "TEST_ASSERT_UNLESS_MESSAGE(${1:condition}, \"${2:message}\");",
            "trigger": "aum",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert false message",
            "contents": "TEST_ASSERT_FALSE_MESSAGE(${1:condition}, \"${2:message}\");",
            "trigger": "afm",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert null message",
            "contents": "TEST_ASSERT_NULL_MESSAGE(${1:pointer}, \"${2:message}\");",
            "trigger": "anm",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert not null message",
            "contents": "TEST_ASSERT_NOT_NULL_MESSAGE(${1:pointer}, \"${2:message}\");",
            "trigger": "annm",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert empty message",
            "contents": "TEST_ASSERT_EMPTY_MESSAGE(${1:pointer}, \"${2:message}\");",
            "trigger": "aem",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert not empty message",
            "contents": "TEST_ASSERT_NOT_EMPTY_MESSAGE(${1:pointer}, \"${2:message}\");",
            "trigger": "anem",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert equal int message",
            "contents": "TEST_ASSERT_EQUAL_INT_MESSAGE(${1:expected}, ${2:actual}, \"${3:message}\");",
            "trigger": "aeim",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert equal int8 message",
            "contents": "TEST_ASSERT_EQUAL_INT8_MESSAGE(${1:expected}, ${2:actual}, \"${3:message}\");",
            "trigger": "aei8m",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert equal int16 message",
            "contents": "TEST_ASSERT_EQUAL_INT16_MESSAGE(${1:expected}, ${2:actual}, \"${3:message}\");",
            "trigger": "aei16m",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert equal int32 message",
            "contents": "TEST_ASSERT_EQUAL_INT32_MESSAGE(${1:expected}, ${2:actual}, \"${3:message}\");",
            "trigger": "aei32m",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert equal int64 message",
            "contents": "TEST_ASSERT_EQUAL_INT64_MESSAGE(${1:expected}, ${2:actual}, \"${3:message}\");",
            "trigger": "aei64m",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert equal uint message",
            "contents": "TEST_ASSERT_EQUAL_UINT_MESSAGE(${1:expected}, ${2:actual}, \"${3:message}\");",
            "trigger": "aeum",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert equal uint8 message",
            "contents": "TEST_ASSERT_EQUAL_UINT8_MESSAGE(${1:expected}, ${2:actual}, \"${3:message}\");",
            "trigger": "aeu8m",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert equal uint16 message",
            "contents": "TEST_ASSERT_EQUAL_UINT16_MESSAGE(${1:expected}, ${2:actual}, \"${3:message}\");",
            "trigger": "aeu16m",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert equal uint32 message",
            "contents": "TEST_ASSERT_EQUAL_UINT32_MESSAGE(${1:expected}, ${2:actual}, \"${3:message}\");",
            "trigger": "aeu32m",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert equal uint64 message",
            "contents": "TEST_ASSERT_EQUAL_UINT64_MESSAGE(${1:expected}, ${2:actual}, \"${3:message}\");",
            "trigger": "aeu64m",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert equal size_t message",
            "contents": "TEST_ASSERT_EQUAL_size_t_MESSAGE(${1:expected}, ${2:actual}, \"${3:message}\");",
            "trigger": "aeszm",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert equal hex message",
            "contents": "TEST_ASSERT_EQUAL_HEX_MESSAGE(${1:expected}, ${2:actual}, \"${3:message}\");",
            "trigger": "aehm",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert equal hex8 message",
            "contents": "TEST_ASSERT_EQUAL_HEX8_MESSAGE(${1:expected}, ${2:actual}, \"${3:message}\");",
            "trigger": "aeh8m",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert equal hex16 message",
            "contents": "TEST_ASSERT_EQUAL_HEX16_MESSAGE(${1:expected}, ${2:actual}, \"${3:message}\");",
            "trigger": "aeh16m",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert equal hex32 message",
            "contents": "TEST_ASSERT_EQUAL_HEX32_MESSAGE(${1:expected}, ${2:actual}, \"${3:message}\");",
            "trigger": "aeh32m",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert equal hex64 message",
            "contents": "TEST_ASSERT_EQUAL_HEX64_MESSAGE(${1:expected}, ${2:actual}, \"${3:message}\");",
            "trigger": "aeh64m",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert bits message",
            "contents": "TEST_ASSERT_BITS_MESSAGE(${1:mask}, ${2:expected}, ${3:actual}, \"${4:message}\");",
            "trigger": "abm",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert bits high message",
            "contents": "TEST_ASSERT_BITS_HIGH_MESSAGE(${1:mask}, ${2:actual}, \"${3:message}\");",
            "trigger": "abhm",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert bits low message",
            "contents": "TEST_ASSERT_BITS_LOW_MESSAGE(${1:mask}, ${2:actual}, \"${3:message}\");",
            "trigger": "ablm",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert bit high message",
            "contents": "TEST_ASSERT_BIT_HIGH_MESSAGE(${1:bit}, ${2:actual}, \"${3:message}\");",
            "trigger": "abhm",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert bit low message",
            "contents": "TEST_ASSERT_BIT_LOW_MESSAGE(${1:bit}, ${2:actual}, \"${3:message}\");",
            "trigger": "ablm",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert equal char message",
            "contents": "TEST_ASSERT_EQUAL_CHAR_MESSAGE(${1:expected}, ${2:actual}, \"${3:message}\");",
            "trigger": "aecm",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert not equal int message",
            "contents": "TEST_ASSERT_NOT_EQUAL_INT_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "aneim",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert not equal int8 message",
            "contents": "TEST_ASSERT_NOT_EQUAL_INT8_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "anei8m",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert not equal int16 message",
            "contents": "TEST_ASSERT_NOT_EQUAL_INT16_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "anei16m",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert not equal int32 message",
            "contents": "TEST_ASSERT_NOT_EQUAL_INT32_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "anei32m",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert not equal int64 message",
            "contents": "TEST_ASSERT_NOT_EQUAL_INT64_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "anei64m",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert not equal uint message",
            "contents": "TEST_ASSERT_NOT_EQUAL_UINT_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "aneum",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert not equal uint8 message",
            "contents": "TEST_ASSERT_NOT_EQUAL_UINT8_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "aneu8m",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert not equal uint16 message",
            "contents": "TEST_ASSERT_NOT_EQUAL_UINT16_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "aneu16m",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert not equal uint32 message",
            "contents": "TEST_ASSERT_NOT_EQUAL_UINT32_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "aneu32m",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert not equal uint64 message",
            "contents": "TEST_ASSERT_NOT_EQUAL_UINT64_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "aneu64m",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert not equal size_t message",
            "contents": "TEST_ASSERT_NOT_EQUAL_size_t_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "aneszm",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert not equal hex8 message",
            "contents": "TEST_ASSERT_NOT_EQUAL_HEX8_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "aneh8m",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert not equal hex16 message",
            "contents": "TEST_ASSERT_NOT_EQUAL_HEX16_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "aneh16m",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert not equal hex32 message",
            "contents": "TEST_ASSERT_NOT_EQUAL_HEX32_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "aneh32m",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert not equal hex64 message",
            "contents": "TEST_ASSERT_NOT_EQUAL_HEX64_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "aneh64m",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert not equal char message",
            "contents": "TEST_ASSERT_NOT_EQUAL_CHAR_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "anecm",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert greater than message",
            "contents": "TEST_ASSERT_GREATER_THAN_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "agtm",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert greater than int message",
            "contents": "TEST_ASSERT_GREATER_THAN_INT_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "agtim",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert greater than int8 message",
            "contents": "TEST_ASSERT_GREATER_THAN_INT8_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "agti8m",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert greater than int16 message",
            "contents": "TEST_ASSERT_GREATER_THAN_INT16_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "agti16m",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert greater than int32 message",
            "contents": "TEST_ASSERT_GREATER_THAN_INT32_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "agti32m",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert greater than int64 message",
            "contents": "TEST_ASSERT_GREATER_THAN_INT64_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "agti64m",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert greater than uint message",
            "contents": "TEST_ASSERT_GREATER_THAN_UINT_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "agtum",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert greater than uint8 message",
            "contents": "TEST_ASSERT_GREATER_THAN_UINT8_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "agtu8m",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert greater than uint16 message",
            "contents": "TEST_ASSERT_GREATER_THAN_UINT16_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "agtu16m",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert greater than uint32 message",
            "contents": "TEST_ASSERT_GREATER_THAN_UINT32_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "agtu32m",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert greater than uint64 message",
            "contents": "TEST_ASSERT_GREATER_THAN_UINT64_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "agtu64m",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert greater than size_t message",
            "contents": "TEST_ASSERT_GREATER_THAN_size_t_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "agtszm",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert greater than hex8 message",
            "contents": "TEST_ASSERT_GREATER_THAN_HEX8_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "agth8m",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert greater than hex16 message",
            "contents": "TEST_ASSERT_GREATER_THAN_HEX16_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "agth16m",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert greater than hex32 message",
            "contents": "TEST_ASSERT_GREATER_THAN_HEX32_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "agth32m",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert greater than hex64 message",
            "contents": "TEST_ASSERT_GREATER_THAN_HEX64_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "agth64m",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert greater than char message",
            "contents": "TEST_ASSERT_GREATER_THAN_CHAR_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "agtcm",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert less than message",
            "contents": "TEST_ASSERT_LESS_THAN_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "altm",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert less than int message",
            "contents": "TEST_ASSERT_LESS_THAN_INT_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "altim",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert less than int8 message",
            "contents": "TEST_ASSERT_LESS_THAN_INT8_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "alti8m",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert less than int16 message",
            "contents": "TEST_ASSERT_LESS_THAN_INT16_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "alti16m",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert less than int32 message",
            "contents": "TEST_ASSERT_LESS_THAN_INT32_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "alti32m",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert less than int64 message",
            "contents": "TEST_ASSERT_LESS_THAN_INT64_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "alti64m",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert less than uint message",
            "contents": "TEST_ASSERT_LESS_THAN_UINT_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "altum",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert less than uint8 message",
            "contents": "TEST_ASSERT_LESS_THAN_UINT8_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "altu8m",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert less than uint16 message",
            "contents": "TEST_ASSERT_LESS_THAN_UINT16_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "altu16m",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert less than uint32 message",
            "contents": "TEST_ASSERT_LESS_THAN_UINT32_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "altu32m",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert less than uint64 message",
            "contents": "TEST_ASSERT_LESS_THAN_UINT64_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "altu64m",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert less than size_t message",
            "contents": "TEST_ASSERT_LESS_THAN_size_t_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "altszm",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert less than hex8 message",
            "contents": "TEST_ASSERT_LESS_THAN_HEX8_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "alth8m",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert less than hex16 message",
            "contents": "TEST_ASSERT_LESS_THAN_HEX16_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "alth16m",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert less than hex32 message",
            "contents": "TEST_ASSERT_LESS_THAN_HEX32_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "alth32m",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert less than hex64 message",
            "contents": "TEST_ASSERT_LESS_THAN_HEX64_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "alth64m",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert less than char message",
            "contents": "TEST_ASSERT_LESS_THAN_CHAR_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "altcm",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert greater or equal message",
            "contents": "TEST_ASSERT_GREATER_OR_EQUAL_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "agoem",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert greater or equal int message",
            "contents": "TEST_ASSERT_GREATER_OR_EQUAL_INT_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "agoeim",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert greater or equal int8 message",
            "contents": "TEST_ASSERT_GREATER_OR_EQUAL_INT8_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "agoei8m",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert greater or equal int16 message",
            "contents": "TEST_ASSERT_GREATER_OR_EQUAL_INT16_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "agoei16m",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert greater or equal int32 message",
            "contents": "TEST_ASSERT_GREATER_OR_EQUAL_INT32_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "agoei32m",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert greater or equal int64 message",
            "contents": "TEST_ASSERT_GREATER_OR_EQUAL_INT64_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "agoei64m",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert greater or equal uint message",
            "contents": "TEST_ASSERT_GREATER_OR_EQUAL_UINT_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "agoeum",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert greater or equal uint8 message",
            "contents": "TEST_ASSERT_GREATER_OR_EQUAL_UINT8_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "agoeu8m",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert greater or equal uint16 message",
            "contents": "TEST_ASSERT_GREATER_OR_EQUAL_UINT16_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "agoeu16m",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert greater or equal uint32 message",
            "contents": "TEST_ASSERT_GREATER_OR_EQUAL_UINT32_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "agoeu32m",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert greater or equal uint64 message",
            "contents": "TEST_ASSERT_GREATER_OR_EQUAL_UINT64_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "agoeu64m",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert greater or equal size_t message",
            "contents": "TEST_ASSERT_GREATER_OR_EQUAL_size_t_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "agoeszm",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert greater or equal hex8 message",
            "contents": "TEST_ASSERT_GREATER_OR_EQUAL_HEX8_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "agoeh8m",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert greater or equal hex16 message",
            "contents": "TEST_ASSERT_GREATER_OR_EQUAL_HEX16_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "agoeh16m",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert greater or equal hex32 message",
            "contents": "TEST_ASSERT_GREATER_OR_EQUAL_HEX32_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "agoeh32m",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert greater or equal hex64 message",
            "contents": "TEST_ASSERT_GREATER_OR_EQUAL_HEX64_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "agoeh64m",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert greater or equal char message",
            "contents": "TEST_ASSERT_GREATER_OR_EQUAL_CHAR_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "agoecm",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert less or equal message",
            "contents": "TEST_ASSERT_LESS_OR_EQUAL_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "aloem",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert less or equal int message",
            "contents": "TEST_ASSERT_LESS_OR_EQUAL_INT_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "aloeim",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert less or equal int8 message",
            "contents": "TEST_ASSERT_LESS_OR_EQUAL_INT8_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "aloei8m",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert less or equal int16 message",
            "contents": "TEST_ASSERT_LESS_OR_EQUAL_INT16_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "aloei16m",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert less or equal int32 message",
            "contents": "TEST_ASSERT_LESS_OR_EQUAL_INT32_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "aloei32m",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert less or equal int64 message",
            "contents": "TEST_ASSERT_LESS_OR_EQUAL_INT64_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "aloei64m",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert less or equal uint message",
            "contents": "TEST_ASSERT_LESS_OR_EQUAL_UINT_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "aloeum",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert less or equal uint8 message",
            "contents": "TEST_ASSERT_LESS_OR_EQUAL_UINT8_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "aloeu8m",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert less or equal uint16 message",
            "contents": "TEST_ASSERT_LESS_OR_EQUAL_UINT16_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "aloeu16m",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert less or equal uint32 message",
            "contents": "TEST_ASSERT_LESS_OR_EQUAL_UINT32_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "aloeu32m",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert less or equal uint64 message",
            "contents": "TEST_ASSERT_LESS_OR_EQUAL_UINT64_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "aloeu64m",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert less or equal size_t message",
            "contents": "TEST_ASSERT_LESS_OR_EQUAL_size_t_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "aloeszm",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert less or equal hex8 message",
            "contents": "TEST_ASSERT_LESS_OR_EQUAL_HEX8_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "aloeh8m",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert less or equal hex16 message",
            "contents": "TEST_ASSERT_LESS_OR_EQUAL_HEX16_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "aloeh16m",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert less or equal hex32 message",
            "contents": "TEST_ASSERT_LESS_OR_EQUAL_HEX32_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "aloeh32m",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert less or equal hex64 message",
            "contents": "TEST_ASSERT_LESS_OR_EQUAL_HEX64_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "aloeh64m",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert less or equal char message",
            "contents": "TEST_ASSERT_LESS_OR_EQUAL_CHAR_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "aloecm",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert int within message",
            "contents": "TEST_ASSERT_INT_WITHIN_MESSAGE(${1:delta}, ${2:expected}, ${3:actual}, \"${4:message}\");",
            "trigger": "aiwm",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert int8 within message",
            "contents": "TEST_ASSERT_INT8_WITHIN_MESSAGE(${1:delta}, ${2:expected}, ${3:actual}, \"${4:message}\");",
            "trigger": "ai8wm",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert int16 within message",
            "contents": "TEST_ASSERT_INT16_WITHIN_MESSAGE(${1:delta}, ${2:expected}, ${3:actual}, \"${4:message}\");",
            "trigger": "ai16wm",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert int32 within message",
            "contents": "TEST_ASSERT_INT32_WITHIN_MESSAGE(${1:delta}, ${2:expected}, ${3:actual}, \"${4:message}\");",
            "trigger": "ai32wm",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert int64 within message",
            "contents": "TEST_ASSERT_INT64_WITHIN_MESSAGE(${1:delta}, ${2:expected}, ${3:actual}, \"${4:message}\");",
            "trigger": "ai64wm",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert uint within message",
            "contents": "TEST_ASSERT_UINT_WITHIN_MESSAGE(${1:delta}, ${2:expected}, ${3:actual}, \"${4:message}\");",
            "trigger": "auwm",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert uint8 within message",
            "contents": "TEST_ASSERT_UINT8_WITHIN_MESSAGE(${1:delta}, ${2:expected}, ${3:actual}, \"${4:message}\");",
            "trigger": "au8wm",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert uint16 within message",
            "contents": "TEST_ASSERT_UINT16_WITHIN_MESSAGE(${1:delta}, ${2:expected}, ${3:actual}, \"${4:message}\");",
            "trigger": "au16wm",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert uint32 within message",
            "contents": "TEST_ASSERT_UINT32_WITHIN_MESSAGE(${1:delta}, ${2:expected}, ${3:actual}, \"${4:message}\");",
            "trigger": "au32wm",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert uint64 within message",
            "contents": "TEST_ASSERT_UINT64_WITHIN_MESSAGE(${1:delta}, ${2:expected}, ${3:actual}, \"${4:message}\");",
            "trigger": "au64wm",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert size_t within message",
            "contents": "TEST_ASSERT_size_t_WITHIN_MESSAGE(${1:delta}, ${2:expected}, ${3:actual}, \"${4:message}\");",
            "trigger": "aszwm",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert hex within message",
            "contents": "TEST_ASSERT_HEX_WITHIN_MESSAGE(${1:delta}, ${2:expected}, ${3:actual}, \"${4:message}\");",
            "trigger": "ahwm",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert hex8 within message",
            "contents": "TEST_ASSERT_HEX8_WITHIN_MESSAGE(${1:delta}, ${2:expected}, ${3:actual}, \"${4:message}\");",
            "trigger": "ah8wm",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert hex16 within message",
            "contents": "TEST_ASSERT_HEX16_WITHIN_MESSAGE(${1:delta}, ${2:expected}, ${3:actual}, \"${4:message}\");",
            "trigger": "ah16wm",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert hex32 within message",
            "contents": "TEST_ASSERT_HEX32_WITHIN_MESSAGE(${1:delta}, ${2:expected}, ${3:actual}, \"${4:message}\");",
            "trigger": "ah32wm",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert hex64 within message",
            "contents": "TEST_ASSERT_HEX64_WITHIN_MESSAGE(${1:delta}, ${2:expected}, ${3:actual}, \"${4:message}\");",
            "trigger": "ah64wm",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert char within message",
            "contents": "TEST_ASSERT_CHAR_WITHIN_MESSAGE(${1:delta}, ${2:expected}, ${3:actual}, \"${4:message}\");",
            "trigger": "acwm",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert int array within message",
            "contents": "TEST_ASSERT_INT_ARRAY_WITHIN_MESSAGE(${1:delta}, ${2:expected}, ${3:actual}, ${4:num_elements}, \"${5:message}\");",
            "trigger": "aiawm",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert int8 array within message",
            "contents": "TEST_ASSERT_INT8_ARRAY_WITHIN_MESSAGE(${1:delta}, ${2:expected}, ${3:actual}, ${4:num_elements}, \"${5:message}\");",
            "trigger": "ai8awm",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert int16 array within message",
            "contents": "TEST_ASSERT_INT16_ARRAY_WITHIN_MESSAGE(${1:delta}, ${2:expected}, ${3:actual}, ${4:num_elements}, \"${5:message}\");",
            "trigger": "ai16awm",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert int32 array within message",
            "contents": "TEST_ASSERT_INT32_ARRAY_WITHIN_MESSAGE(${1:delta}, ${2:expected}, ${3:actual}, ${4:num_elements}, \"${5:message}\");",
            "trigger": "ai32awm",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert int64 array within message",
            "contents": "TEST_ASSERT_INT64_ARRAY_WITHIN_MESSAGE(${1:delta}, ${2:expected}, ${3:actual}, ${4:num_elements}, \"${5:message}\");",
            "trigger": "ai64awm",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert uint array within message",
            "contents": "TEST_ASSERT_UINT_ARRAY_WITHIN_MESSAGE(${1:delta}, ${2:expected}, ${3:actual}, ${4:num_elements}, \"${5:message}\");",
            "trigger": "auawm",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert uint8 array within message",
            "contents": "TEST_ASSERT_UINT8_ARRAY_WITHIN_MESSAGE(${1:delta}, ${2:expected}, ${3:actual}, ${4:num_elements}, \"${5:message}\");",
            "trigger": "au8awm",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert uint16 array within message",
            "contents": "TEST_ASSERT_UINT16_ARRAY_WITHIN_MESSAGE(${1:delta}, ${2:expected}, ${3:actual}, ${4:num_elements}, \"${5:message}\");",
            "trigger": "au16awm",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert uint32 array within message",
            "contents": "TEST_ASSERT_UINT32_ARRAY_WITHIN_MESSAGE(${1:delta}, ${2:expected}, ${3:actual}, ${4:num_elements}, \"${5:message}\");",
            "trigger": "au32awm",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert uint64 array within message",
            "contents": "TEST_ASSERT_UINT64_ARRAY_WITHIN_MESSAGE(${1:delta}, ${2:expected}, ${3:actual}, ${4:num_elements}, \"${5:message}\");",
            "trigger": "au64awm",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert size_t array within message",
            "contents": "TEST_ASSERT_size_t_ARRAY_WITHIN_MESSAGE(${1:delta}, ${2:expected}, ${3:actual}, ${4:num_elements}, \"${5:message}\");",
            "trigger": "aszawm",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert hex array within message",
            "contents": "TEST_ASSERT_HEX_ARRAY_WITHIN_MESSAGE(${1:delta}, ${2:expected}, ${3:actual}, ${4:num_elements}, \"${5:message}\");",
            "trigger": "ahawm",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert hex8 array within message",
            "contents": "TEST_ASSERT_HEX8_ARRAY_WITHIN_MESSAGE(${1:delta}, ${2:expected}, ${3:actual}, ${4:num_elements}, \"${5:message}\");",
            "trigger": "ah8awm",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert hex16 array within message",
            "contents": "TEST_ASSERT_HEX16_ARRAY_WITHIN_MESSAGE(${1:delta}, ${2:expected}, ${3:actual}, ${4:num_elements}, \"${5:message}\");",
            "trigger": "ah16awm",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert hex32 array within message",
            "contents": "TEST_ASSERT_HEX32_ARRAY_WITHIN_MESSAGE(${1:delta}, ${2:expected}, ${3:actual}, ${4:num_elements}, \"${5:message}\");",
            "trigger": "ah32awm",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert hex64 array within message",
            "contents": "TEST_ASSERT_HEX64_ARRAY_WITHIN_MESSAGE(${1:delta}, ${2:expected}, ${3:actual}, ${4:num_elements}, \"${5:message}\");",
            "trigger": "ah64awm",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert char array within message",
            "contents": "TEST_ASSERT_CHAR_ARRAY_WITHIN_MESSAGE(${1:delta}, ${2:expected}, ${3:actual}, ${4:num_elements}, \"${5:message}\");",
            "trigger": "acawm",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert equal ptr message",
            "contents": "TEST_ASSERT_EQUAL_PTR_MESSAGE(${1:expected}, ${2:actual}, \"${3:message}\");",
            "trigger": "aepm",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert equal string message",
            "contents": "TEST_ASSERT_EQUAL_STRING_MESSAGE(${1:expected}, ${2:actual}, \"${3:message}\");",
            "trigger": "aesm",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert equal string len message",
            "contents": "TEST_ASSERT_EQUAL_STRING_LEN_MESSAGE(${1:expected}, ${2:actual}, ${3:len}, \"${4:message}\");",
            "trigger": "aeslm",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert equal memory message",
            "contents": "TEST_ASSERT_EQUAL_MEMORY_MESSAGE(${1:expected}, ${2:actual}, ${3:len}, \"${4:message}\");",
            "trigger": "aemm",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert equal int array message",
            "contents": "TEST_ASSERT_EQUAL_INT_ARRAY_MESSAGE(${1:expected}, ${2:actual}, ${3:num_elements}, \"${4:message}\");",
            "trigger": "aeiam",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert equal int8 array message",
            "contents": "TEST_ASSERT_EQUAL_INT8_ARRAY_MESSAGE(${1:expected}, ${2:actual}, ${3:num_elements}, \"${4:message}\");",
            "trigger": "aei8am",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert equal int16 array message",
            "contents": "TEST_ASSERT_EQUAL_INT16_ARRAY_MESSAGE(${1:expected}, ${2:actual}, ${3:num_elements}, \"${4:message}\");",
            "trigger": "aei16am",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert equal int32 array message",
            "contents": "TEST_ASSERT_EQUAL_INT32_ARRAY_MESSAGE(${1:expected}, ${2:actual}, ${3:num_elements}, \"${4:message}\");",
            "trigger": "aei32am",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert equal int64 array message",
            "contents": "TEST_ASSERT_EQUAL_INT64_ARRAY_MESSAGE(${1:expected}, ${2:actual}, ${3:num_elements}, \"${4:message}\");",
            "trigger": "aei64am",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert equal uint array message",
            "contents": "TEST_ASSERT_EQUAL_UINT_ARRAY_MESSAGE(${1:expected}, ${2:actual}, ${3:num_elements}, \"${4:message}\");",
            "trigger": "aeuam",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert equal uint8 array message",
            "contents": "TEST_ASSERT_EQUAL_UINT8_ARRAY_MESSAGE(${1:expected}, ${2:actual}, ${3:num_elements}, \"${4:message}\");",
            "trigger": "aeu8am",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert equal uint16 array message",
            "contents": "TEST_ASSERT_EQUAL_UINT16_ARRAY_MESSAGE(${1:expected}, ${2:actual}, ${3:num_elements}, \"${4:message}\");",
            "trigger": "aeu16am",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert equal uint32 array message",
            "contents": "TEST_ASSERT_EQUAL_UINT32_ARRAY_MESSAGE(${1:expected}, ${2:actual}, ${3:num_elements}, \"${4:message}\");",
            "trigger": "aeu32am",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert equal uint64 array message",
            "contents": "TEST_ASSERT_EQUAL_UINT64_ARRAY_MESSAGE(${1:expected}, ${2:actual}, ${3:num_elements}, \"${4:message}\");",
            "trigger": "aeu64am",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert equal size_t array message",
            "contents": "TEST_ASSERT_EQUAL_size_t_ARRAY_MESSAGE(${1:expected}, ${2:actual}, ${3:num_elements}, \"${4:message}\");",
            "trigger": "aeszam",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert equal hex array message",
            "contents": "TEST_ASSERT_EQUAL_HEX_ARRAY_MESSAGE(${1:expected}, ${2:actual}, ${3:num_elements}, \"${4:message}\");",
            "trigger": "aeham",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert equal hex8 array message",
            "contents": "TEST_ASSERT_EQUAL_HEX8_ARRAY_MESSAGE(${1:expected}, ${2:actual}, ${3:num_elements}, \"${4:message}\");",
            "trigger": "aeh8am",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert equal hex16 array message",
            "contents": "TEST_ASSERT_EQUAL_HEX16_ARRAY_MESSAGE(${1:expected}, ${2:actual}, ${3:num_elements}, \"${4:message}\");",
            "trigger": "aeh16am",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert equal hex32 array message",
            "contents": "TEST_ASSERT_EQUAL_HEX32_ARRAY_MESSAGE(${1:expected}, ${2:actual}, ${3:num_elements}, \"${4:message}\");",
            "trigger": "aeh32am",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert equal hex64 array message",
            "contents": "TEST_ASSERT_EQUAL_HEX64_ARRAY_MESSAGE(${1:expected}, ${2:actual}, ${3:num_elements}, \"${4:message}\");",
            "trigger": "aeh64am",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert equal ptr array message",
            "contents": "TEST_ASSERT_EQUAL_PTR_ARRAY_MESSAGE(${1:expected}, ${2:actual}, ${3:num_elements}, \"${4:message}\");",
            "trigger": "aepam",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert equal string array message",
            "contents": "TEST_ASSERT_EQUAL_STRING_ARRAY_MESSAGE(${1:expected}, ${2:actual}, ${3:num_elements}, \"${4:message}\");",
            "trigger": "aesam",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert equal memory array message",
            "contents": "TEST_ASSERT_EQUAL_MEMORY_ARRAY_MESSAGE(${1:expected}, ${2:actual}, ${3:len}, ${4:num_elements}, \"${5:message}\");",
            "trigger": "aemam",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert equal char array message",
            "contents": "TEST_ASSERT_EQUAL_CHAR_ARRAY_MESSAGE(${1:expected}, ${2:actual}, ${3:num_elements}, \"${4:message}\");",
            "trigger": "aecam",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert each equal int message",
            "contents": "TEST_ASSERT_EACH_EQUAL_INT_MESSAGE(${1:expected}, ${2:actual}, ${3:num_elements}, \"${4:message}\");",
            "trigger": "aeeim",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert each equal int8 message",
            "contents": "TEST_ASSERT_EACH_EQUAL_INT8_MESSAGE(${1:expected}, ${2:actual}, ${3:num_elements}, \"${4:message}\");",
            "trigger": "aeei8m",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert each equal int16 message",
            "contents": "TEST_ASSERT_EACH_EQUAL_INT16_MESSAGE(${1:expected}, ${2:actual}, ${3:num_elements}, \"${4:message}\");",
            "trigger": "aeei16m",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert each equal int32 message",
            "contents": "TEST_ASSERT_EACH_EQUAL_INT32_MESSAGE(${1:expected}, ${2:actual}, ${3:num_elements}, \"${4:message}\");",
            "trigger": "aeei32m",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert each equal int64 message",
            "contents": "TEST_ASSERT_EACH_EQUAL_INT64_MESSAGE(${1:expected}, ${2:actual}, ${3:num_elements}, \"${4:message}\");",
            "trigger": "aeei64m",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert each equal uint message",
            "contents": "TEST_ASSERT_EACH_EQUAL_UINT_MESSAGE(${1:expected}, ${2:actual}, ${3:num_elements}, \"${4:message}\");",
            "trigger": "aeeum",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert each equal uint8 message",
            "contents": "TEST_ASSERT_EACH_EQUAL_UINT8_MESSAGE(${1:expected}, ${2:actual}, ${3:num_elements}, \"${4:message}\");",
            "trigger": "aeeu8m",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert each equal uint16 message",
            "contents": "TEST_ASSERT_EACH_EQUAL_UINT16_MESSAGE(${1:expected}, ${2:actual}, ${3:num_elements}, \"${4:message}\");",
            "trigger": "aeeu16m",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert each equal uint32 message",
            "contents": "TEST_ASSERT_EACH_EQUAL_UINT32_MESSAGE(${1:expected}, ${2:actual}, ${3:num_elements}, \"${4:message}\");",
            "trigger": "aeeu32m",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert each equal uint64 message",
            "contents": "TEST_ASSERT_EACH_EQUAL_UINT64_MESSAGE(${1:expected}, ${2:actual}, ${3:num_elements}, \"${4:message}\");",
            "trigger": "aeeu64m",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert each equal size_t message",
            "contents": "TEST_ASSERT_EACH_EQUAL_size_t_MESSAGE(${1:expected}, ${2:actual}, ${3:num_elements}, \"${4:message}\");",
            "trigger": "aeeszm",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert each equal hex message",
            "contents": "TEST_ASSERT_EACH_EQUAL_HEX_MESSAGE(${1:expected}, ${2:actual}, ${3:num_elements}, \"${4:message}\");",
            "trigger": "aeehm",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert each equal hex8 message",
            "contents": "TEST_ASSERT_EACH_EQUAL_HEX8_MESSAGE(${1:expected}, ${2:actual}, ${3:num_elements}, \"${4:message}\");",
            "trigger": "aeeh8m",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert each equal hex16 message",
            "contents": "TEST_ASSERT_EACH_EQUAL_HEX16_MESSAGE(${1:expected}, ${2:actual}, ${3:num_elements}, \"${4:message}\");",
            "trigger": "aeeh16m",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert each equal hex32 message",
            "contents": "TEST_ASSERT_EACH_EQUAL_HEX32_MESSAGE(${1:expected}, ${2:actual}, ${3:num_elements}, \"${4:message}\");",
            "trigger": "aeeh32m",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert each equal hex64 message",
            "contents": "TEST_ASSERT_EACH_EQUAL_HEX64_MESSAGE(${1:expected}, ${2:actual}, ${3:num_elements}, \"${4:message}\");",
            "trigger": "aeeh64m",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert each equal ptr message",
            "contents": "TEST_ASSERT_EACH_EQUAL_PTR_MESSAGE(${1:expected}, ${2:actual}, ${3:num_elements}, \"${4:message}\");",
            "trigger": "aeepm",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert each equal string message",
            "contents": "TEST_ASSERT_EACH_EQUAL_STRING_MESSAGE(${1:expected}, ${2:actual}, ${3:num_elements}, \"${4:message}\");",
            "trigger": "aeesm",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert each equal memory message",
            "contents": "TEST_ASSERT_EACH_EQUAL_MEMORY_MESSAGE(${1:expected}, ${2:actual}, ${3:len}, ${4:num_elements}, \"${5:message}\");",
            "trigger": "aeemm",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert each equal char message",
            "contents": "TEST_ASSERT_EACH_EQUAL_CHAR_MESSAGE(${1:expected}, ${2:actual}, ${3:num_elements}, \"${4:message}\");",
            "trigger": "aeecm",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert float within message",
            "contents": "TEST_ASSERT_FLOAT_WITHIN_MESSAGE(${1:delta}, ${2:expected}, ${3:actual}, \"${4:message}\");",
            "trigger": "afwm",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert equal float message",
            "contents": "TEST_ASSERT_EQUAL_FLOAT_MESSAGE(${1:expected}, ${2:actual}, \"${3:message}\");",
            "trigger": "aefm",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert not equal float message",
            "contents": "TEST_ASSERT_NOT_EQUAL_FLOAT_MESSAGE(${1:expected}, ${2:actual}, \"${3:message}\");",
            "trigger": "anefm",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert equal float array message",
            "contents": "TEST_ASSERT_EQUAL_FLOAT_ARRAY_MESSAGE(${1:expected}, ${2:actual}, ${3:num_elements}, \"${4:message}\");",
            "trigger": "aefam",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert each equal float message",
            "contents": "TEST_ASSERT_EACH_EQUAL_FLOAT_MESSAGE(${1:expected}, ${2:actual}, ${3:num_elements}, \"${4:message}\");",
            "trigger": "aeefm",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert greater than float message",
            "contents": "TEST_ASSERT_GREATER_THAN_FLOAT_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "agtfm",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert greater or equal float message",
            "contents": "TEST_ASSERT_GREATER_OR_EQUAL_FLOAT_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "agoefm",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert less than float message",
            "contents": "TEST_ASSERT_LESS_THAN_FLOAT_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "altfm",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert less or equal float message",
            "contents": "TEST_ASSERT_LESS_OR_EQUAL_FLOAT_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "aloefm",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert float is inf message",
            "contents": "TEST_ASSERT_FLOAT_IS_INF_MESSAGE(${1:actual}, \"${2:message}\");",
            "trigger": "afiim",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert float is neg inf message",
            "contents": "TEST_ASSERT_FLOAT_IS_NEG_INF_MESSAGE(${1:actual}, \"${2:message}\");",
            "trigger": "afinim",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert float is nan message",
            "contents": "TEST_ASSERT_FLOAT_IS_NAN_MESSAGE(${1:actual}, \"${2:message}\");",
            "trigger": "afinm",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert float is determinate message",
            "contents": "TEST_ASSERT_FLOAT_IS_DETERMINATE_MESSAGE(${1:actual}, \"${2:message}\");",
            "trigger": "afidm",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert float is not inf message",
            "contents": "TEST_ASSERT_FLOAT_IS_NOT_INF_MESSAGE(${1:actual}, \"${2:message}\");",
            "trigger": "afinim",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert float is not neg inf message",
            "contents": "TEST_ASSERT_FLOAT_IS_NOT_NEG_INF_MESSAGE(${1:actual}, \"${2:message}\");",
            "trigger": "afinnim",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert float is not nan message",
            "contents": "TEST_ASSERT_FLOAT_IS_NOT_NAN_MESSAGE(${1:actual}, \"${2:message}\");",
            "trigger": "afinnm",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert float is not determinate message",
            "contents": "TEST_ASSERT_FLOAT_IS_NOT_DETERMINATE_MESSAGE(${1:actual}, \"${2:message}\");",
            "trigger": "afindm",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert double within message",
            "contents": "TEST_ASSERT_DOUBLE_WITHIN_MESSAGE(${1:delta}, ${2:expected}, ${3:actual}, \"${4:message}\");",
            "trigger": "adwm",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert equal double message",
            "contents": "TEST_ASSERT_EQUAL_DOUBLE_MESSAGE(${1:expected}, ${2:actual}, \"${3:message}\");",
            "trigger": "aedm",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert not equal double message",
            "contents": "TEST_ASSERT_NOT_EQUAL_DOUBLE_MESSAGE(${1:expected}, ${2:actual}, \"${3:message}\");",
            "trigger": "anedm",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert equal double array message",
            "contents": "TEST_ASSERT_EQUAL_DOUBLE_ARRAY_MESSAGE(${1:expected}, ${2:actual}, ${3:num_elements}, \"${4:message}\");",
            "trigger": "aedam",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert each equal double message",
            "contents": "TEST_ASSERT_EACH_EQUAL_DOUBLE_MESSAGE(${1:expected}, ${2:actual}, ${3:num_elements}, \"${4:message}\");",
            "trigger": "aeedm",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert greater than double message",
            "contents": "TEST_ASSERT_GREATER_THAN_DOUBLE_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "agtdm",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert greater or equal double message",
            "contents": "TEST_ASSERT_GREATER_OR_EQUAL_DOUBLE_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "agoedm",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert less than double message",
            "contents": "TEST_ASSERT_LESS_THAN_DOUBLE_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "altdm",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert less or equal double message",
            "contents": "TEST_ASSERT_LESS_OR_EQUAL_DOUBLE_MESSAGE(${1:threshold}, ${2:actual}, \"${3:message}\");",
            "trigger": "aloedm",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert double is inf message",
            "contents": "TEST_ASSERT_DOUBLE_IS_INF_MESSAGE(${1:actual}, \"${2:message}\");",
            "trigger": "adiim",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert double is neg inf message",
            "contents": "TEST_ASSERT_DOUBLE_IS_NEG_INF_MESSAGE(${1:actual}, \"${2:message}\");",
            "trigger": "adinim",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert double is nan message",
            "contents": "TEST_ASSERT_DOUBLE_IS_NAN_MESSAGE(${1:actual}, \"${2:message}\");",
            "trigger": "adinm",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert double is determinate message",
            "contents": "TEST_ASSERT_DOUBLE_IS_DETERMINATE_MESSAGE(${1:actual}, \"${2:message}\");",
            "trigger": "adidm",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert double is not inf message",
            "contents": "TEST_ASSERT_DOUBLE_IS_NOT_INF_MESSAGE(${1:actual}, \"${2:message}\");",
            "trigger": "adinim",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert double is not neg inf message",
            "contents": "TEST_ASSERT_DOUBLE_IS_NOT_NEG_INF_MESSAGE(${1:actual}, \"${2:message}\");",
            "trigger": "adinnim",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert double is not nan message",
            "contents": "TEST_ASSERT_DOUBLE_IS_NOT_NAN_MESSAGE(${1:actual}, \"${2:message}\");",
            "trigger": "adinnm",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert double is not determinate message",
            "contents": "TEST_ASSERT_DOUBLE_IS_NOT_DETERMINATE_MESSAGE(${1:actual}, \"${2:message}\");",
            "trigger": "adindm",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert equal message",
            "contents": "TEST_ASSERT_EQUAL_MESSAGE(${1:expected}, ${2:actual}, \"${3:message}\");",
            "trigger": "aem",
            "kind": "snippet"
        },
        {
            "annotation": "unity: assert not equal message",
            "contents": "TEST_ASSERT_NOT_EQUAL_MESSAGE(${1:expected}, ${2:actual}, \"${3:message}\");",
            "trigger": "anem",
            "kind": "snippet"
        }
    ]
}